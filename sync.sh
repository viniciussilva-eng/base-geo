#!/bin/bash

# ====================================================================
# Script de Sincroniza√ß√£o com GitHub v3.1 (Modo Seguro e For√ßado)
#
# Uso:
#   ./sync.sh        -> Executa o modo de sincroniza√ß√£o padr√£o e seguro.
#   ./sync.sh force  -> Executa o modo for√ßado (espelho local -> remoto).
# ====================================================================

# --- Configura√ß√£o ---
set -e # Aborta o script se qualquer comando falhar

REPO_URL="git@github.com:viniciussilva-eng/base-geo.git"

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o de log
log() {
    echo -e "$(date +"%Y-%m-%d %H:%M:%S") - $1"
}

# --- In√≠cio do Script ---
log "${BLUE}============================================${NC}"
log "${BLUE}  INICIANDO SCRIPT DE SINCRONIZA√á√ÉO v3.1      ${NC}"
log "${BLUE}============================================${NC}"

# 1. VALIDA√á√ïES E SETUP INICIAL
PROJETO_DIR=$(pwd)
log "${YELLOW}üìÅ Projeto: $PROJETO_DIR${NC}"

if ! git --version &>/dev/null; then
    log "${RED}‚ùå Git n√£o est√° instalado. Abortando.${NC}"
    exit 1
fi

git config --global --add safe.directory "$PROJETO_DIR"

if [ ! -d ".git" ]; then
    log "${GREEN}‚úÖ Reposit√≥rio n√£o encontrado. Inicializando...${NC}"
    git init
    git branch -M main
fi

# 2. CONFIGURA√á√ÉO DO REMOTO (SSH)
log "${BLUE}üîß Configurando remoto para usar SSH: $REPO_URL${NC}"
git remote set-url origin "$REPO_URL" 2>/dev/null || git remote add origin "$REPO_URL"
git lfs install

# 3. SELE√á√ÉO DO MODO DE OPERA√á√ÉO
if [[ "$1" == "force" ]]; then
    # ==================== MODO FOR√áADO (ESPELHO) ====================
    log "${RED}üö® MODO FOR√áADO ATIVADO! üö®${NC}"
    log "${YELLOW}Este modo far√° o reposit√≥rio remoto ser um ESPELHO EXATO da sua pasta local."
    log "${YELLOW}Qualquer commit ou arquivo que exista no GitHub mas n√£o aqui ser√° APAGADO PERMANENTEMENTE.${NC}"
    read -p "Voc√™ tem certeza que deseja continuar? (s/N): " confirm
    if [[ "$confirm" != "s" && "$confirm" != "S" ]]; then
        log "${GREEN}Opera√ß√£o cancelada pelo usu√°rio.${NC}"
        exit 0
    fi

    log "${BLUE}üì¶ Adicionando todas as altera√ß√µes locais (novos, modificados, deletados)...${NC}"
    git add .

    log "${BLUE}‚úèÔ∏è  Criando commit de espelhamento...${NC}"
    # O || true evita que o script pare se n√£o houver nada para commitar
    git commit -m "refactor(force): Sincroniza√ß√£o for√ßada para espelhar estado local em $(date +"%Y-%m-%d %H:%M")" || true

    log "${RED}üöÄ Executando PUSH FOR√áADO... Sobrescrevendo o remoto...${NC}"
    git push --force origin main

else
    # ==================== MODO PADR√ÉO (SEGURO) ====================
    log "${GREEN}‚ñ∂Ô∏è  Executando em modo de sincroniza√ß√£o padr√£o (seguro).${NC}"

    log "${BLUE}üîÑ Puxando altera√ß√µes do remoto (pull --rebase)...${NC}"
    if ! git pull --rebase origin main; then
        log "${RED}‚ùå Falha no 'git pull'. Resolva os conflitos ou limpe as altera√ß√µes locais e tente novamente.${NC}"
        exit 1
    fi

    log "${BLUE}üîÑ Atualizando subm√≥dulos com as vers√µes remotas...${NC}"
    git submodule update --remote --merge

    log "${YELLOW}üîç Detectando arquivos grandes (>50MB) para Git LFS...${NC}"
    ARQUIVOS_GRANDES=$(find . -type f -size +50M -not -path "./.git/*")
    if [ -n "$ARQUIVOS_GRANDES" ]; then
        log "${YELLOW}Arquivos grandes detectados. Rastreando com LFS...${NC}"
        echo "$ARQUIVOS_GRANDES" | while read -r arquivo; do git lfs track "${arquivo#./}"; done
        git add .gitattributes
    fi

    if [ -z "$(git status --porcelain)" ]; then
        log "${GREEN}‚úÖ N√£o h√° novas altera√ß√µes locais para enviar. Sincroniza√ß√£o conclu√≠da.${NC}"
        exit 0
    fi

    log "${BLUE}üì¶ Adicionando altera√ß√µes locais...${NC}"
    git add .

    log "${BLUE}‚úèÔ∏è  Criando commit...${NC}"
    git commit -m "feat(auto): Sincroniza√ß√£o de arquivos em $(date +"%Y-%m-%d %H:%M")"

    log "${GREEN}üöÄ Enviando altera√ß√µes para o remoto (push)...${NC}"
    git push origin main
fi

# Envia objetos LFS, se houver
log "${BLUE}üì§ Enviando arquivos grandes via Git LFS...${NC}"
git lfs push --all origin main

# --- RELAT√ìRIO FINAL ---
log "${GREEN}============================================${NC}"
log "${GREEN}   SINCRONIZA√á√ÉO CONCLU√çDA COM SUCESSO!     ${NC}"
log "${GREEN}============================================${NC}"
log "${YELLOW}√öltimo commit:${NC}"
git log -1 --pretty=format:"%h - %s (%cr)"
log "${GREEN}============================================${NC}"

exit 0
